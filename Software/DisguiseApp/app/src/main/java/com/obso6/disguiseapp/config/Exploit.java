package com.obso6.disguiseapp.config;

public class Exploit {

    private final SppBle mSppBle;
    //循环标志位
    private int flag = 0;
    //循环长度
    private int LoopLength = 0;
    //脚本
    private Script LOOPScript;
    private int LoopN = 0;

    public Exploit(SppBle mSppBle) {
        this.mSppBle = mSppBle;
    }

    //脚本发送（带循环处理）
    public boolean executeScript(Script script, String scriptSting) throws Exception {
        try{
            //脚本关于循环预处理
            if(scriptSting!=""){
                String[] scriptexe = scriptSting.split("\n");
                int start_flag = 0;
                int end_flag = 0;
                for(int i = 0; i < scriptexe.length; i++){
                    if(scriptexe[i].contains("LOOP")){
                        //开启循环
                        start_flag =i;
                    }else{
                        if(scriptexe[i].contains("LEND")){
                            //结束循环
                            end_flag =i;
                        }
                    }
                }
                for(int i = 0; i < scriptexe.length; i++){
                    scriptexe[i] = scriptexe[i]+"\n";
                }
                StringBuilder LoopScript = new StringBuilder();
                for(int i = start_flag+1; i <= end_flag-1; i++){
                    LoopScript.append(scriptexe[i]);
                }
                LoopLength = end_flag-start_flag;
                LOOPScript = new Script(LoopScript.toString());
            }
            //loop through the Script and execute each line based on the keywords
            for(Command c : script.getCmdList()){
                //Implement logic for REPLAY...
                for(int i = 0; i < c.numberOfTimesToExecute; i++) {
                    //execute command
                    if(flag == 0){
                        executeCommand(c);
                    }
                    if(flag == 1){
                        for(int lm = 1; lm < LoopN; lm++){
                            Thread.sleep(100);
                            executeScript(LOOPScript);
                            if(lm+1 == LoopN){
                                flag = 0;
                                i = i+ LoopLength;
                                LoopN = 0;
                            }
                        }
                    }
                }
                if (c.cmdType != CommandType.DELAY){
                    Thread.sleep(script.getDefaultDelay());
                }
            }
        }catch (Exception ex){
            throw new Exception( String.format("脚本执行错误 - %s",ex.getMessage()));
        }
        return true;
    }

    //脚本发送
    private boolean executeScript(Script script) throws Exception {
        for(Command c : script.getCmdList()){
            //Implement logic for REPLAY...
            for(int i = 0; i < c.numberOfTimesToExecute; i++) {
                //execute command
                executeCommand(c);
            }
            if (c.cmdType != CommandType.DELAY){
                Thread.sleep(script.getDefaultDelay());
            }
        }
        return true;

    }

    //执行badusb脚本
    private void executeCommand(Command c) throws Exception {
        //Payload
        switch (c.cmdType){
            case DELAY:
                if(c.getCmdInt()+"".length() == 0){
                    Thread.sleep(100);
                }else{
                    Thread.sleep(c.getCmdInt());
                }
                break;
            case STRING:
                sendText(c.getCmd());
                break;
            case GUI:
                sendCodeSequence("GUI",c.getCmd());
                break;
            case MENU:
                sendCodeSequence("MENU","");
                break;
            case ALT:
                sendCodeSequence("ALT",c.getCmd());
                break;
            case SHIFT:
                sendCodeSequence("SHIFT",c.getCmd());
                break;
            case PS:
                sendCodeSequence("PRINTSCREEN",c.getCmd());
                break;
            case CONTROL:
            case CTRL:
                sendCodeSequence("CTRL",c.getCmd());
                break;
            case START:
                sendCodeSequence("START",c.getCmd());
                break;
            case END:
                sendCodeSequence("","END");
                break;
            case ENTER:
                sendCodeSequence("#","ENTER");
                break;
            case DOWNARROW:
            case DOWN:
                sendCodeSequence("#","DOWN");
                break;
            case LEFTARROW:
            case LEFT:
                sendCodeSequence("#","LEFT");
                break;
            case RIGHTARROW:
            case RIGHT:
                sendCodeSequence("#","RIGHT");
                break;
            case UPARROW:
            case UP:
                sendCodeSequence("#","UP");
                break;
            case LOCK:
                sendCodeSequence("#","CAPSLOCK");
                break;
            case KEY:
                sendCodeSequence("",c.getCmd());
                break;
            case LOOP:
                flag = 1;
                LoopN = Integer.parseInt(c.getCmd());
                break;
            case LEND:
                flag = 0;
                break;
            case STRINGE:
                sendText(c.getCmd());
                Thread.sleep(500);
                sendCodeSequence("#","ENTER");
                break;
        }
    }

    //发送String文字
    private void sendText(String cmd) throws InterruptedException {
        if(cmd.length()>0){
            for(int i = 0; i< cmd.length(); i++) {
                String result = pwnCodeText(cmd.charAt(i));
                byte[] send=getStringhex(result);
                //防止乱码
                Thread.sleep(10);
                mSppBle.Write(send);
            }
        }
    }

    //发送按键
    private void sendCodeSequence(String modifierKey, String cmd) throws InterruptedException {
        String result = pwnCodeString(modifierKey, cmd);
        byte[] send=getStringhex(result);
        //防止乱码
        Thread.sleep(10);
        mSppBle.Write(send);
    }

    //按键处理
    private String pwnCodeString(String modifierKey, String cmd) {
        String result = "";
        if(modifierKey.length()>1) {
            //组合按键(值存在)
            if (cmd.length() > 0) {
                cmd = cmd.toLowerCase();
                switch (modifierKey) {
                    case "KEY":
                        result = "00" + pwnCodeChar(cmd.charAt(0));
                        break;
                    case "CTRL":
                        result = "01" + pwnCodeChar(cmd.charAt(0));
                        break;
                    case "SHIFT":
                        result = "02" + pwnCodeChar(cmd.charAt(0));
                        break;
                    case "ALT":
                        result = "04" + pwnCodeChar(cmd.charAt(0));
                        break;
                    case "MENU":
                    case "GUI":
                        result = "08" + pwnCodeChar(cmd.charAt(0));
                        break;
                    case "PRINTSCREEN":
                        if(cmd.equals("alt")){
                            result = "0200460000000000"+"\n"+"0000000000000000";
                        }
                        break;
                    case "STRAT":
                        switch (cmd){
                            case "a":
                                result = "0000040000000000";
                                break;
                            case "b":
                                result = "0000050000000000";
                                break;
                            case "c":
                                result = "0000060000000000";
                                break;
                            case "d":
                                result = "0000070000000000";
                                break;
                            case "e":
                                result = "0000080000000000";
                                break;
                        }
                        break;
                    default:
                        result = "0000000000000000";
                }
            }else{
                //组合按键(值不存在)
                switch (modifierKey) {
                    case "CTRL":
                        result = "0100000000000000"+"\n"+"0000000000000000";
                        break;
                    case "SHIFT":
                        result = "0200000000000000"+"\n"+"0000000000000000";
                        break;
                    case "ALT":
                        result = "0400000000000000"+"\n"+"0000000000000000";
                        break;
                    case "MENU":
                    case "GUI":
                        result = "0800000000000000"+"\n"+"0000000000000000";
                        break;
                    case "PRINTSCREEN":
                        result = "0000460000000000"+"\n"+"0000000000000000";
                        break;
                    default:
                        result = "0000000000000000";
                }
            }
        }else if(modifierKey.length()==0){
            switch (cmd) {
                case "ENTER":
                    result = "0000280000000000";
                    break;
                case "DOWN":
                    result = "0000510000000000";
                    break;
                case "LEFT":
                    result = "0000500000000000";
                    break;
                case "RIGHT":
                    result = "00004F0000000000";
                    break;
                case "UP":
                    result = "0000520000000000";
                    break;
                case "CAPSLOCK":
                    result = "0000390000000000";
                    break;
                case "ESC":
                    result = "0000290000000000";
                    break;
                case "F1":
                    result = "00003A0000000000";
                    break;
                case "F2":
                    result = "00003B0000000000";
                    break;
                case "F3":
                    result = "00003C0000000000";
                    break;
                case "F4":
                    result = "00003D0000000000";
                    break;
                case "F5":
                    result = "00003E0000000000";
                    break;
                case "F6":
                    result = "00003F0000000000";
                    break;
                case "F7":
                    result = "0000400000000000";
                    break;
                case "F8":
                    result = "0000410000000000";
                    break;
                case "F9":
                    result = "0000420000000000";
                    break;
                case "F10":
                    result = "0000430000000000";
                    break;
                case "F11":
                    result = "0000440000000000";
                    break;
                case "F12":
                    result = "0000450000000000";
                    break;
                case "PRT":
                    result = "0000460000000000";
                    break;
                case "DEL":
                    result = "00004C0000000000";
                    break;
                case "WAVE":
                    result = "0000350000000000";
                    break;
                case "1":
                    result = "00001E0000000000";
                    break;
                case "2":
                    result = "00001F0000000000";
                    break;
                case "3":
                    result = "0000200000000000";
                    break;
                case "4":
                    result = "0000210000000000";
                    break;
                case "5":
                    result = "0000220000000000";
                    break;
                case "6":
                    result = "0000230000000000";
                    break;
                case "7":
                    result = "0000240000000000";
                    break;
                case "8":
                    result = "0000250000000000";
                    break;
                case "9":
                    result = "0000260000000000";
                    break;
                case "0":
                    result = "0000270000000000";
                    break;
                case "SHORT":
                    result = "00002D0000000000";
                    break;
                case "ADD":
                    result = "00002E0000000000";
                    break;
                case "BACK":
                    result = "00002A0000000000";
                    break;
                case "TAB":
                    result = "00002B0000000000";
                    break;
                case "Q":
                    result = "0000140000000000";
                    break;
                case "W":
                    result = "00001A0000000000";
                    break;
                case "E":
                    result = "0000080000000000";
                    break;
                case "R":
                    result = "0000150000000000";
                    break;
                case "T":
                    result = "0000170000000000";
                    break;
                case "Y":
                    result = "00001C0000000000";
                    break;
                case "U":
                    result = "0000180000000000";
                    break;
                case "I":
                    result = "00000C0000000000";
                    break;
                case "O":
                    result = "0000120000000000";
                    break;
                case "P":
                    result = "0000130000000000";
                    break;
                case "BRACKETSLEFT":
                    result = "00002F0000000000";
                    break;
                case "BRACKETSRIGHT":
                    result = "0000300000000000";
                    break;
                case "VER":
                    result = "0000310000000000";
                    break;
                case "CAPS":
                    result = "0000390000000000";
                    break;
                case "A":
                    result = "0000040000000000";
                    break;
                case "S":
                    result = "0000160000000000";
                    break;
                case "D":
                    result = "0000070000000000";
                    break;
                case "F":
                    result = "0000090000000000";
                    break;
                case "G":
                    result = "00000A0000000000";
                    break;
                case "H":
                    result = "00000B0000000000";
                    break;
                case "J":
                    result = "00000D0000000000";
                    break;
                case "K":
                    result = "00000E0000000000";
                    break;
                case "L":
                    result = "00000F0000000000";
                    break;
                case "COLON":
                    result = "0000330000000000";
                    break;
                case "QUO":
                    result = "0000340000000000";
                    break;
                case "SHIFT":
                    result = "0200000000000000";
                    break;
                case "Z":
                    result = "00001D0000000000";
                    break;
                case "X":
                    result = "00001B0000000000";
                    break;
                case "C":
                    result = "0000060000000000";
                    break;
                case "V":
                    result = "0000190000000000";
                    break;
                case "B":
                    result = "0000050000000000";
                    break;
                case "N":
                    result = "0000110000000000";
                    break;
                case "M":
                    result = "0000100000000000";
                    break;
                case "ANGLELEFT":
                    result = "0000360000000000";
                    break;
                case "ANGLERIGHT":
                    result = "0000370000000000";
                    break;
                case "QUE":
                    result = "0000380000000000";
                    break;
                case "HOME":
                    result = "00004A0000000000";
                    break;
                case "INS":
                    result = "0000490000000000";
                    break;
                case "CTRL":
                    result = "0100000000000000";
                    break;
                case "WIN":
                    result = "0800000000000000";
                    break;
                case "ALT":
                    result = "0400000000000000";
                    break;
                case "SPACE":
                    result = "00002C0000000000";
                    break;
                case "APPLICATION":
                    result = "0000650000000000";
                    break;
                case "RELEASE":
                    result = "0000000000000000";
                    break;
            }
        }else if(modifierKey.length()==1){
            //单个按键(全键盘)
            switch (cmd) {
                case "ENTER":
                    result = "0000280000000000"+"\n"+"0000000000000000";
                    break;
                case "DOWN":
                    result = "0000510000000000"+"\n"+"0000000000000000";
                    break;
                case "LEFT":
                    result = "0000500000000000"+"\n"+"0000000000000000";
                    break;
                case "RIGHT":
                    result = "00004F0000000000"+"\n"+"0000000000000000";
                    break;
                case "UP":
                    result = "0000520000000000"+"\n"+"0000000000000000";
                    break;
                case "CAPSLOCK":
                    result = "0000390000000000"+"\n"+"0000000000000000";
                    break;
                case "ESC":
                    result = "0000290000000000"+"\n"+"0000000000000000";
                    break;
                default:
                    result = "0000000000000000";
            }
        }
        return result;
    }

    //文字处理
    private String pwnCodeText(char cmdChar) {
        String result;
        switch (cmdChar){
            case 'a':
                result = "0000040000000000"+"\n"+"0000000000000000";
                break;
            case 'b':
                result = "0000050000000000"+"\n"+"0000000000000000";
                break;
            case 'c':
                result = "0000060000000000"+"\n"+"0000000000000000";
                break;
            case 'd':
                result = "0000070000000000"+"\n"+"0000000000000000";
                break;
            case 'e':
                result = "0000080000000000"+"\n"+"0000000000000000";
                break;
            case 'f':
                result = "0000090000000000"+"\n"+"0000000000000000";
                break;
            case 'g':
                result = "00000A0000000000"+"\n"+"0000000000000000";
                break;
            case 'h':
                result = "00000B0000000000"+"\n"+"0000000000000000";
                break;
            case 'i':
                result = "00000C0000000000"+"\n"+"0000000000000000";
                break;
            case 'j':
                result = "00000D0000000000"+"\n"+"0000000000000000";
                break;
            case 'k':
                result = "00000E0000000000"+"\n"+"0000000000000000";
                break;
            case 'l':
                result = "00000F0000000000"+"\n"+"0000000000000000";
                break;
            case 'm':
                result = "0000100000000000"+"\n"+"0000000000000000";
                break;
            case 'n':
                result = "0000110000000000"+"\n"+"0000000000000000";
                break;
            case 'o':
                result = "0000120000000000"+"\n"+"0000000000000000";
                break;
            case 'p':
                result = "0000130000000000"+"\n"+"0000000000000000";
                break;
            case 'q':
                result = "0000140000000000"+"\n"+"0000000000000000";
                break;
            case 'r':
                result = "0000150000000000"+"\n"+"0000000000000000";
                break;
            case 's':
                result = "0000160000000000"+"\n"+"0000000000000000";
                break;
            case 't':
                result = "0000170000000000"+"\n"+"0000000000000000";
                break;
            case 'u':
                result = "0000180000000000"+"\n"+"0000000000000000";
                break;
            case 'v':
                result = "0000190000000000"+"\n"+"0000000000000000";
                break;
            case 'w':
                result = "00001A0000000000"+"\n"+"0000000000000000";
                break;
            case 'x':
                result = "00001B0000000000"+"\n"+"0000000000000000";
                break;
            case 'y':
                result = "00001C0000000000"+"\n"+"0000000000000000";
                break;
            case 'z':
                result = "00001D0000000000"+"\n"+"0000000000000000";
                break;
            case 'A':
                result = "0200040000000000"+"\n"+"0000000000000000";
                break;
            case 'B':
                result = "0200050000000000"+"\n"+"0000000000000000";
                break;
            case 'C':
                result = "0200060000000000"+"\n"+"0000000000000000";
                break;
            case 'D':
                result = "0200070000000000"+"\n"+"0000000000000000";
                break;
            case 'E':
                result = "0200080000000000"+"\n"+"0000000000000000";
                break;
            case 'F':
                result = "0200090000000000"+"\n"+"0000000000000000";
                break;
            case 'G':
                result = "02000A0000000000"+"\n"+"0000000000000000";
                break;
            case 'H':
                result = "02000B0000000000"+"\n"+"0000000000000000";
                break;
            case 'I':
                result = "02000C0000000000"+"\n"+"0000000000000000";
                break;
            case 'J':
                result = "02000D0000000000"+"\n"+"0000000000000000";
                break;
            case 'K':
                result = "02000E0000000000"+"\n"+"0000000000000000";
                break;
            case 'L':
                result = "02000F0000000000"+"\n"+"0000000000000000";
                break;
            case 'M':
                result = "0200100000000000"+"\n"+"0000000000000000";
                break;
            case 'N':
                result = "0200110000000000"+"\n"+"0000000000000000";
                break;
            case 'O':
                result = "0200120000000000"+"\n"+"0000000000000000";
                break;
            case 'P':
                result = "0200130000000000"+"\n"+"0000000000000000";
                break;
            case 'Q':
                result = "0200140000000000"+"\n"+"0000000000000000";
                break;
            case 'R':
                result = "0200150000000000"+"\n"+"0000000000000000";
                break;
            case 'S':
                result = "0200160000000000"+"\n"+"0000000000000000";
                break;
            case 'T':
                result = "0200170000000000"+"\n"+"0000000000000000";
                break;
            case 'U':
                result = "0200180000000000"+"\n"+"0000000000000000";
                break;
            case 'V':
                result = "0200190000000000"+"\n"+"0000000000000000";
                break;
            case 'W':
                result = "02001A0000000000"+"\n"+"0000000000000000";
                break;
            case 'X':
                result = "02001B0000000000"+"\n"+"0000000000000000";
                break;
            case 'Y':
                result = "02001C0000000000"+"\n"+"0000000000000000";
                break;
            case 'Z':
                result = "02001D0000000000"+"\n"+"0000000000000000";
                break;
            case '!':
            case '！':
            case '1':
                result = "00001E0000000000"+"\n"+"0000000000000000";
                break;
            case '@':
            case '2':
                result = "00001F0000000000"+"\n"+"0000000000000000";
                break;
            case '#':
            case '3':
                result = "0000200000000000"+"\n"+"0000000000000000";
                break;
            case '￥':
            case '$':
            case '4':
                result = "0000210000000000"+"\n"+"0000000000000000";
                break;
            case '%':
            case '5':
                result = "0000220000000000"+"\n"+"0000000000000000";
                break;
            case '…':
            case '^':
            case '6':
                result = "0000230000000000"+"\n"+"0000000000000000";
                break;
            case '&':
            case '7':
                result = "0000240000000000"+"\n"+"0000000000000000";
                break;
            case '*':
            case '8':
                result = "0000250000000000"+"\n"+"0000000000000000";
                break;
            case '（':
            case '(':
            case '9':
                result = "0000260000000000"+"\n"+"0000000000000000";
                break;
            case '）':
            case ')':
            case '0':
                result = "0000270000000000"+"\n"+"0000000000000000";
                break;
            case ' ':
                result = "00002C0000000000"+"\n"+"0000000000000000";
                break;
            case '-':
                result = "00002D0000000000"+"\n"+"0000000000000000";
                break;
            case '—':
            case '_':
                result = "02002D0000000000"+"\n"+"0000000000000000";
                break;
            case '=':
                result = "00002E0000000000"+"\n"+"0000000000000000";
                break;
            case '+':
                result = "02002E0000000000"+"\n"+"0000000000000000";
                break;
            case '【':
            case '[':
                result = "00002F0000000000"+"\n"+"0000000000000000";
                break;
            case '{':
                result = "02002F0000000000"+"\n"+"0000000000000000";
                break;
            case '】':
            case ']':
                result = "0000300000000000"+"\n"+"0000000000000000";
                break;
            case '}':
                result = "0200300000000000"+"\n"+"0000000000000000";
                break;
            case '、':
            case '\\':
                result = "0000310000000000"+"\n"+"0000000000000000";
                break;
            case '|':
                result = "0200310000000000"+"\n"+"0000000000000000";
                break;
            case '；':
            case ';':
                result = "0000330000000000"+"\n"+"0000000000000000";
                break;
            case '：':
            case ':':
                result = "0200330000000000"+"\n"+"0000000000000000";
                break;
            case '’':
            case '\'':
                result = "0000340000000000"+"\n"+"0000000000000000";
                break;
            case '“':
            case '"':
                result = "0200340000000000"+"\n"+"0000000000000000";
                break;
            case '`':
                result = "0000350000000000"+"\n"+"0000000000000000";
                break;
            case '~':
                result = "0200350000000000"+"\n"+"0000000000000000";
                break;
            case '，':
            case ',':
                result = "0000360000000000"+"\n"+"0000000000000000";
                break;
            case '《':
            case '<':
                result = "0200360000000000"+"\n"+"0000000000000000";
                break;
            case '。':
            case '.':
                result = "0000370000000000"+"\n"+"0000000000000000";
                break;
            case '》':
            case '>':
                result = "0200370000000000"+"\n"+"0000000000000000";
                break;
            case '/':
                result = "0000380000000000"+"\n"+"0000000000000000";
                break;
            case '？':
            case '?':
                result = "0200380000000000"+"\n"+"0000000000000000";
                break;
            default:
                result = "0000000000000000";
                break;

        }
        return  result;
    }

    //字符处理
    private byte[] getStringhex(String message) {
        message=message.replaceAll(" ", "");
        char[] buffer =message.toCharArray();
        byte[] Byte = new byte[buffer.length/2];
        int index=0;
        int bit_st=0;
        for (char c : buffer) {
            int v = (int) (c & 0xFF);
            if (((v > 47) && (v < 58)) || ((v > 64) && (v < 71)) || ((v > 96) && (v < 103))) {
                if (bit_st == 0) {
                    Byte[index] |= (getASCvalue(c) * 16);
                    bit_st = 1;
                } else {
                    Byte[index] |= (getASCvalue(c));
                    bit_st = 0;
                    index++;
                }
            } else if (v == 32) {
                if (bit_st == 0) ;
                else {
                    index++;
                    bit_st = 0;
                }
            }
        }
        bit_st=0;
        return Byte;
    }

    //字符处理
    private byte getASCvalue(char in) {
        byte out=0;
        switch(in){
            case '0':out=0;break;
            case '1':out=1;break;
            case '2':out=2;break;
            case '3':out=3;break;
            case '4':out=4;break;
            case '5':out=5;break;
            case '6':out=6;break;
            case '7':out=7;break;
            case '8':out=8;break;
            case '9':out=9;break;
            case 'a':
            case 'A':
                out=10;break;
            case 'b':
            case 'B':
                out=11;break;
            case 'c':
            case 'C':
                out=12;break;
            case 'd':
            case 'D':
                out=13;break;
            case 'e':
            case 'E':
                out=14;break;
            case 'f':
            case 'F':
                out=15;break;
        }
        return out;
    }

    //转化发送组合按键
    private String pwnCodeChar(char cmdChar) {
        String result;
        switch (cmdChar){
            case 'a':
                result = "00040000000000"+"\n"+"0000000000000000";
                break;
            case 'b':
                result = "00050000000000"+"\n"+"0000000000000000";
                break;
            case 'c':
                result = "00060000000000"+"\n"+"0000000000000000";
                break;
            case 'd':
                result = "00070000000000"+"\n"+"0000000000000000";
                break;
            case 'e':
                result = "00080000000000"+"\n"+"0000000000000000";
                break;
            case 'f':
                result = "00090000000000"+"\n"+"0000000000000000";
                break;
            case 'g':
                result = "000A0000000000"+"\n"+"0000000000000000";
                break;
            case 'h':
                result = "000B0000000000"+"\n"+"0000000000000000";
                break;
            case 'i':
                result = "000C0000000000"+"\n"+"0000000000000000";
                break;
            case 'j':
                result = "000D0000000000"+"\n"+"0000000000000000";
                break;
            case 'k':
                result = "000E0000000000"+"\n"+"0000000000000000";
                break;
            case 'l':
                result = "000F0000000000"+"\n"+"0000000000000000";
                break;
            case 'm':
                result = "00100000000000"+"\n"+"0000000000000000";
                break;
            case 'n':
                result = "00110000000000"+"\n"+"0000000000000000";
                break;
            case 'o':
                result = "00120000000000"+"\n"+"0000000000000000";
                break;
            case 'p':
                result = "00130000000000"+"\n"+"0000000000000000";
                break;
            case 'q':
                result = "00140000000000"+"\n"+"0000000000000000";
                break;
            case 'r':
                result = "00150000000000"+"\n"+"0000000000000000";
                break;
            case 's':
                result = "00160000000000"+"\n"+"0000000000000000";
                break;
            case 't':
                result = "00170000000000"+"\n"+"0000000000000000";
                break;
            case 'u':
                result = "00180000000000"+"\n"+"0000000000000000";
                break;
            case 'v':
                result = "00190000000000"+"\n"+"0000000000000000";
                break;
            case 'w':
                result = "001A0000000000"+"\n"+"0000000000000000";
                break;
            case 'x':
                result = "001B0000000000"+"\n"+"0000000000000000";
                break;
            case 'y':
                result = "001C0000000000"+"\n"+"0000000000000000";
                break;
            case 'z':
                result = "001D0000000000"+"\n"+"0000000000000000";
                break;
            case '!':
            case '1':
                result = "001E0000000000"+"\n"+"0000000000000000";
                break;
            case '@':
            case '2':
                result = "001F0000000000"+"\n"+"0000000000000000";
                break;
            case '#':
            case '3':
                result = "00200000000000"+"\n"+"0000000000000000";
                break;
            case '$':
            case '4':
                result = "00210000000000"+"\n"+"0000000000000000";
                break;
            case '%':
            case '5':
                result = "00220000000000"+"\n"+"0000000000000000";
                break;
            case '^':
            case '6':
                result = "00230000000000"+"\n"+"0000000000000000";
                break;
            case '&':
            case '7':
                result = "00240000000000"+"\n"+"0000000000000000";
                break;
            case '*':
            case '8':
                result = "00250000000000"+"\n"+"0000000000000000";
                break;
            case '(':
            case '9':
                result = "00260000000000"+"\n"+"0000000000000000";
                break;
            case ')':
            case '0':
                result = "00270000000000"+"\n"+"0000000000000000";
                break;
            case ' ':
                result = "002C0000000000"+"\n"+"0000000000000000";
                break;
            case '-':
            case '_':
                result = "002D0000000000"+"\n"+"0000000000000000";
                break;
            case '=':
            case '+':
                result = "002E0000000000"+"\n"+"0000000000000000";
                break;
            case '[':
            case '{':
                result = "002F0000000000"+"\n"+"0000000000000000";
                break;
            case ']':
            case '}':
                result = "00300000000000"+"\n"+"0000000000000000";
                break;
            case '\\':
            case '|':
                result = "00310000000000"+"\n"+"0000000000000000";
                break;
            case ';':
            case ':':
                result = "00330000000000"+"\n"+"0000000000000000";
                break;
            case '\'':
            case '"':
                result = "00340000000000"+"\n"+"0000000000000000";
                break;
            case '`':
            case '~':
                result = "00350000000000"+"\n"+"0000000000000000";
                break;
            case ',':
            case '<':
                result = "00360000000000"+"\n"+"0000000000000000";
                break;
            case '.':
            case '>':
                result = "00370000000000"+"\n"+"0000000000000000";
                break;
            case '/':
            case '?':
                result = "00380000000000"+"\n"+"0000000000000000";
                break;
            default:
                result = "0000000000000000";
                break;

        }
        return  result;
    }

}
